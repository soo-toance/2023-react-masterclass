{"version":3,"sources":["Router.tsx","theme.ts","atoms.ts","components/CreateToDo.tsx","components/CreateCategory.tsx","components/ToDo.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["Router","_ref","_objectDestructuringEmpty","_jsx","BrowserRouter","basename","process","children","Switch","darkTheme","bgColor","textColor","accentColor","lightTheme","themeAtom","atom","key","default","Categories","categoryListState","TO_DO","DOING","DONE","categoryState","persistAtom","recoilPersist","storage","localStorage","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","todo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","_useForm","useForm","register","handleSubmit","setValue","_jsxs","onSubmit","toDo","oldToDos","text","id","Date","now","concat","_toConsumableArray","_objectSpread","required","placeholder","CreateCategory","_useRecoilState","useRecoilState","_useRecoilState2","_slicedToArray","setCategoryList","customCategory","oldCategoryLists","ToDo","onClick","event","name","currentTarget","oldTodos","targetIndex","findIndex","newTodo","slice","ToDoList","setCategory","_useRecoilState3","_useRecoilState4","categoryList","style","display","flexDirection","value","onInput","map","aCategory","GlobalStyle","createGlobalStyle","_templateObject","_taggedTemplateLiteral","props","theme","styled","button","_templateObject2","div","_templateObject3","App","_Fragment","ThemeProvider","ReactQueryDevtools","initialIsOpen","queryClient","QueryClient","ReactDOM","render","React","StrictMode","RecoilRoot","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.d83d8a1e.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\ninterface IRouterProps {\n}\n\nfunction Router({} : IRouterProps) {\n    return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n        </Switch>\n    </BrowserRouter>\n    );\n}\n\nexport default Router;","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme:DefaultTheme = {\n    bgColor: \"#f5f6fa\",\n    textColor: \"#2f3640\",\n    accentColor: \"#e67e22\",\n}\n\nexport const lightTheme:DefaultTheme = {\n    bgColor: \"#2f3640\",\n    textColor: \"#f5f6fa\",\n    accentColor: \"#e67e22\",\n}","import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nexport const themeAtom = atom({\n    key: \"theme\",\n    default: \"dark\", \n})\n\nexport enum Categories {\n    \"TO_DO\" = \"TO_DO\",\n    \"DOING\" = \"DOING\",\n    \"DONE\" = \"DONE\",\n  }\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category: Categories;\n}\n\nexport const categoryListState = atom<string[]>({\n    key: \"categoryList\",\n    default: [Categories.TO_DO, Categories.DOING, Categories.DONE]\n})\n\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    default: Categories.TO_DO,\n})\n\nconst { persistAtom } = recoilPersist({\n    key: \"todoLocal\",\n    storage: localStorage,\n  });\n  \nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n    effects_UNSTABLE: [persistAtom],\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n      const toDos = get(toDoState);\n      const category = get(categoryState);\n      return toDos.filter((todo) => todo.category === category);\n    },\n  });","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;","import { useForm } from \"react-hook-form\";\nimport { useRecoilState } from \"recoil\";\nimport { categoryListState } from \"../atoms\";\n\ninterface IForm {\n    customCategory: string;\n}\n\nfunction CreateCategory() {\n  const [categoryList, setCategoryList] = useRecoilState(categoryListState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ customCategory }: IForm) => {\n    setCategoryList((oldCategoryLists) => [\n      customCategory,\n      ...oldCategoryLists,\n    ]);\n    setValue(\"customCategory\", \"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"customCategory\", {\n          required: \"Please write a Category\",\n        })}\n        placeholder=\"Write a Category\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateCategory;","import { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const onClick = (event:React.MouseEvent<HTMLButtonElement>) => {\n    const {\n        currentTarget : { name }\n    } = event;\n\n    setToDos((oldTodos) => {\n        const targetIndex = oldTodos.findIndex(toDo => toDo.id === id);\n        const oldTodo = oldTodos[targetIndex];\n        const newTodo = {text, id, category: name as any};\n\n        return [\n            ...oldTodos.slice(0, targetIndex),\n            newTodo,\n            ...oldTodos.slice(targetIndex + 1),\n        ];    \n    })\n\n  };\n\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && <button name={Categories.DOING } onClick={onClick}>Doing</button>}\n      {category !== Categories.TO_DO && <button name={Categories.TO_DO } onClick={onClick}>To do</button>}\n      {category !== Categories.DONE && <button name={Categories.DONE } onClick={onClick}>Done</button>}\n    </li>\n  );\n}\n\nexport default ToDo;","import { useRecoilValue, useRecoilState } from \"recoil\";\nimport { Categories, categoryListState, categoryState, toDoSelector, toDoState } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport CreateCategory from \"./CreateCategory\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const [category, setCategory] = useRecoilState(categoryState);\n    const [categoryList, setCategoryList] = useRecoilState(categoryListState);\n    const onInput = (event:React.FormEvent<HTMLSelectElement>) => {\n        setCategory(event.currentTarget.value as any);\n    }\n\n    return (\n      <div>\n        <h1>To Dos</h1>\n        <hr />\n        <div style={{display:'flex', flexDirection: 'row'}}>\n            <select value={category} onInput={onInput}> \n                {categoryList?.map((aCategory) => (\n                    <option value={aCategory}>{aCategory}</option>\n                ))}\n            </select>\n            <CreateCategory />\n        </div>\n        <CreateToDo />\n        {toDos?.map((toDo) => (\n            <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\nexport default ToDoList;\n","import React, { useState } from \"react\"\nimport styled, { createGlobalStyle } from \"styled-components\"\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from './theme';\nimport { themeAtom } from \"./atoms\";\nimport { RecoilRoot, useRecoilValue } from \"recoil\";\nimport ToDoList from \"./components/TodoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n\n`;\n\nconst ThemeBtn = styled.button`\n  font-size: 12px;\n  margin: 10px auto;\n`;\n\nconst TopConatiner = styled.div`\n  text-align: center;\n`;\n\nfunction App() {\n\n  // const [theme, setTheme] = useState<string>();\n  // const toggleTheme = () => {\n  //   setTheme(theme === 'light' ? 'dark' : 'light')\n  // };\n  \n  const theme = useRecoilValue(themeAtom);\n\n  return (\n    <>\n     <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme }>\n        <GlobalStyle />\n        {/* <RecoilRoot> */}\n        <ToDoList />\n        {/* </RecoilRoot> */}\n        <Router/>\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from './App';\nimport { RecoilRoot } from \"recoil\";\nimport { darkTheme, lightTheme } from './theme';\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n          <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}